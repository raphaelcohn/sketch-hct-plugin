# Scripts to run before `bun run`-ing a file or script.
# Register plugins by adding them to this list.
#preload = ["./preload.ts"]

# Configure how Bun handles JSX.
# You can also set these fields in the compilerOptions of your tsconfig.json, but they are supported here as well for non-TypeScript projects.
jsx = "react"
jsxFactory = "React.createElement"
jsxFragment = "React.Fragment"
jsxImportSource = "react"

# Reduce memory usage at the cost of performance (`smol` mode).
#smol = true

# Set the log level.
# This can be one of "debug", "warn", or "error".
logLevel = "warn"

# The define field allows you to replace certain global identifiers with constant expressions.
# Bun will replace any usage of the identifier with the expression.
#The expression should be a JSON string.
[define]
# Replace any usage of "process.env.bagel" with the string `lox`.
# The values are parsed as JSON, except single-quoted strings are supported and `'undefined'` becomes `undefined` in JS.
# This will probably change in a future release to be just regular TOML instead.
# It is a holdover from the CLI argument parsing.
#"process.env.bagel" = "'lox'"

# Configure how Bun maps file extensions to loaders.
# This is useful for loading files that aren't natively supported by Bun.
# Bun supports the following loaders:—
# * `jsx`
# * `js`
# * `ts`
# * `tsx`
# * `css`
# * `file`
# * `json`
# * `toml`
# * `wasm`
# * `napi`
# * `base64`
# * `dataurl`
# * `text`
#[loader]
# When a .bagel file is imported, treat it like a tsx file.
#".bagel" = "tsx"

# The telemetry field permit to enable/disable the analytics records.
# Bun records bundle timings (so we can answer with data, "is Bun getting faster?") and feature usage (e.g., "are people actually using macros?").
# The request body size is about 60 bytes, so it's not a lot of data.
# By default the telemetry is enabled.
# Equivalent of DO_NOT_TRACK env variable.
telemetry = false


# Test runner
# The test runner is configured under the [test] section of your bunfig.toml.
[test]

# The root directory to run tests from.
# Default is `.`.
root = "."

# Same as the top-level preload field, but only applies to bun test.
#preload = ["./setup.ts"]

# Same as the top-level smol field, but only applies to bun test.
#smol = true

# Enables test coverage reporting.
# Default `false`.
# Use `--coverage` to override.
coverage = false

# To specify a coverage threshold.
# By default, no threshold is set.
# If your test suite does not meet or exceed this threshold, bun test will exit with a non-zero exit code to indicate the failure.
# Different thresholds can be specified for line-wise, function-wise, and statement-wise coverage.
#coverageThreshold = { line = 0.7, function = 0.8, statement = 0.9 }

# Whether to skip test files when computing coverage statistics.
# Default `false`.
coverageSkipTestFiles = true

# Package Manager
# Package management is a complex issue; to support a range of use cases, the behavior of bun install can be configured in this section.
[install]

# Whether to install optional dependencies.
# Default `true`.
optional = false

# Whether to install development dependencies.
# Default `true`.
peer = true

# Whether bun install will run in "production mode".
# Default `false`.
# In production mode, "devDependencies" are not installed.
# You can use `--productio`n in the CLI to override this setting.
production = false

# Whether to set an exact version in package.json.
# Default `false`.
# By default Bun uses caret ranges; if the latest version of a package is 2.4.1, the version range in your package.json will be ^2.4.1.
# This indicates that any version from 2.4.1 up to (but not including) 3.0.0 is acceptable.
exact = true

# To configure Bun's package auto-install behavior.
# Default `"auto"` — when no `node_modules` folder is found, Bun will automatically install dependencies on the fly during execution.
# Valid values are:—
# * `"auto"`: Resolve modules from local node_modules if it exists. Otherwise, auto-install dependencies on the fly.
# * `"force"`: Always auto-install dependencies, even if `node_modules` exists.
# * `"disable"`: Never auto-install dependencies.
# * `"fallback"`: Check local `node_modules` first, then auto-install any packages that aren't found. You can enable this from the CLI with `bun -i`.
auto = "force"

# When `true`, `bun install` will not update `bun.lockb`.
# Default `false`.
# If `package.json` and the existing `bun.lockb` are not in agreement, this will error.
frozenLockfile = false

# Whether `bun install` will actually install dependencies.
# Default `false`.
# When `true`, it's equivalent to setting `--dry-run` on all bun install commands.
dryRun = false

# To configure the directory where Bun puts globally installed packages.
# Where `bun install --global` installs packages.
#globalDir = "~/.bun/install/global"
# Relies on current working directory being "$root_folder_path".
# ?SEEMS TO BE IGNORED BY BUN?
globalDir = "lib/bun/.bun/install/global"

# To configure the directory where Bun installs globally installed binaries and CLIs.
# Where globally-installed package bins are linked.
#globalBinDir = "~/.bun/bin"
# Relies on current working directory being "$root_folder_path".
globalBinDir = "bin"

# The default registry is <https://registry.npmjs.org/>.
# This can be globally configured.
# Set a token.
#registry = { url = "https://registry.npmjs.org", token = "123456" }
# Set a username and password.
#registry = "https://username:password@registry.npmjs.org"
registry = "https://registry.npmjs.org"

# To configure a registry for a particular scope (e.g. @myorg/<package>) use install.scopes. You can reference environment variables with $variable notation.
[install.scopes]
# Registry as string.
#myorg = "https://username:password@registry.myorg.com/"
# Set a tokend; you can reference environment variables.
#myorg = { url = "https://registry.myorg.com/", token = "$npm_token" }
# Set a username and password; you can reference environment variables
#myorg = { username = "myusername", password = "$npm_password", url = "https://registry.myorg.com/" }

# To configure a CA certificate, use `install.ca` or `install.cafile` to specify a path to a CA certificate file.
# The CA certificate as a string
#ca = "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
# A path to a CA certificate file. The file can contain multiple certificates.
#cafile = "path/to/cafile"

# To configure the cache behavior
[install.cache]

# The directory to use for the cache.
#dir = "~/.bun/install/cache"
# Relies on current working directory being "$root_folder_path".
dir = "lib/bun/.bun/install/cache"

# When `true`, don't load from the global cache.
# Bun may still write to `node_modules/.cache`
disable = false

# When true, always resolve the latest versions from the registry.
disableManifest = false

# To configure lockfile behavior, use the `install.lockfile` section.
[install.lockfile]

# Whether to generate a lockfile on `bun install`.
# Default `true`.
save = true

# Whether to generate a non-Bun lockfile alongside `bun.lockb`
# A `bun.lockb` will always be created.
# Currently `"yarn"` is the only supported value.
#print = "yarn"

# The `bun run` command can be configured under the `run` section.
# These apply to the `bun run` command and the bun command when running a file or executable or script.
# Currently, `bunfig.toml` isn't always automatically loaded for bun run in a local project (it does check for a global bunfig.toml), so you might still need to pass `-c` or `-c=bunfig.toml` to use these settings.
[run]

# run.shell - use the system shell or Bun's shell
# The shell to use when running `package.json` scripts via `bun run` or `bun`.
# On Windows, this defaults to `"bun"` and on other platforms it defaults to `"system"`.
# To always use the system shell instead of Bun's shell (default behavior unless Windows):–
#shell = "system"
# To always use Bun's shell instead of the system shell:
#shell = "bun"
shell = "bun"

# `run.bun` - auto alias node to bun.
# When `true`, this prepends `$PATH` with a node symlink that points to the `bun` binary for all scripts or executables invoked by `bun run` or `bun`.
# This means that if you have a script that runs `node`, it will actually run `bun` instead, without needing to change your script.
# This works recursively, so if your script runs another script that runs `node`, it will also run `bun` instead.
# This applies to shebangs as well, so if you have a script with a shebang that points to `node`, it will actually run `bun` instead.
# By default, this is enabled if node is not already in your `$PATH`.
# This option is equivalent to prefixing all bun run commands with `--bun` (Equivalent to `bun --bun` for all `bun run` commands).
# If set to `false`, this will disable the node symlink.
bun = true

# `run.silent` - suppress reporting the command being run
# When `true`, suppresses the output of the command being run by bun run or bun.
# Without this option, the command being run will be printed to the console.
# With this option, the command being run will not be printed to the console.
# This is equivalent to passing `--silent` to all `bun run` commands.
silent = true
